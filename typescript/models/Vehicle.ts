/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimeInterval } from './TimeInterval';
import {
    TimeIntervalFromJSON,
    TimeIntervalFromJSONTyped,
    TimeIntervalToJSON,
    TimeIntervalToJSONTyped,
} from './TimeInterval';

/**
 * The vehicle used to transport goods.
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * The list of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and the vehicle. If and only if this list of capacities is empty for the given vehicle, the quantities of each transport must be empty.
     * @type {Array<number>}
     * @memberof Vehicle
     */
    capacities?: Array<number>;
    /**
     * The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations.  
     * See [here](./concepts/profiles-and-countries) for a complete list of allowed values. If the majority of locations are in the Americas, _USA_1_PICKUP_ is used as the default. Otherwise, _EUR_VAN_ is used as the default.
     * 
     * If most locations are located in the Americas but a non-American vehicle profile is specified or vice-versa, a warning is returned. Always use a vehicle profile which matches the region of the locations to obtain best results.
     * @type {string}
     * @memberof Vehicle
     */
    profile?: string;
    /**
     * ID of the vehicle's start location. If vehicle's start location does not coincide with the location of the first pickup, only the coordinates of vehicle's start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.
     * @type {string}
     * @memberof Vehicle
     */
    startLocationId?: string;
    /**
     * ID of the vehicle's end location. If vehicle's end location does not coincide with the location of the last delivery, only the coordinates of vehicle's end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.
     * @type {string}
     * @memberof Vehicle
     */
    endLocationId?: string;
    /**
     * Interval in which the vehicle has to start its route. Start and end of the interval may be the same. Leaving this parameter empty means that the route start is unrestricted.
     * @type {TimeInterval}
     * @memberof Vehicle
     */
    routeStartInterval?: TimeInterval;
    /**
     * Restricts the maximum allowed total driving distance [m] for the route of the vehicle.
     * @type {number}
     * @memberof Vehicle
     */
    maximumDistance?: number | null;
}

/**
 * Check if a given object implements the Vehicle interface.
 */
export function instanceOfVehicle(value: object): value is Vehicle {
    return true;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if (json == null) {
        return json;
    }
    return {
        
        'capacities': json['capacities'] == null ? undefined : json['capacities'],
        'profile': json['profile'] == null ? undefined : json['profile'],
        'startLocationId': json['startLocationId'] == null ? undefined : json['startLocationId'],
        'endLocationId': json['endLocationId'] == null ? undefined : json['endLocationId'],
        'routeStartInterval': json['routeStartInterval'] == null ? undefined : TimeIntervalFromJSON(json['routeStartInterval']),
        'maximumDistance': json['maximumDistance'] == null ? undefined : json['maximumDistance'],
    };
}

  export function VehicleToJSON(json: any): Vehicle {
      return VehicleToJSONTyped(json, false);
  }

  export function VehicleToJSONTyped(value?: Vehicle | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'capacities': value['capacities'],
        'profile': value['profile'],
        'startLocationId': value['startLocationId'],
        'endLocationId': value['endLocationId'],
        'routeStartInterval': TimeIntervalToJSON(value['routeStartInterval']),
        'maximumDistance': value['maximumDistance'],
    };
}

