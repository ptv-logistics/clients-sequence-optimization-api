/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Stop } from './Stop';
import {
    StopFromJSON,
    StopFromJSONTyped,
    StopToJSON,
    StopToJSONTyped,
} from './Stop';

/**
 * The optimized route contains a summary of the values of all events, including the start time and the end time of the route and the ids of the orders that remain unplanned.
 * @export
 * @interface OptimizedRoute
 */
export interface OptimizedRoute {
    /**
     * A route contains a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: pickups after deliveries. The sequence of pickups and deliveries is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either pickups or deliveries.
     * @type {Array<Stop>}
     * @memberof OptimizedRoute
     */
    route?: Array<Stop>;
    /**
     * The start time of the route according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof OptimizedRoute
     */
    startTime?: Date;
    /**
     * The end time of the route according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof OptimizedRoute
     */
    endTime?: Date;
    /**
     * The total travel time of the route [s]. Equals difference between end time and start time.
     * @type {number}
     * @memberof OptimizedRoute
     */
    travelTime?: number;
    /**
     * The total driving distance of the route [m].
     * @type {number}
     * @memberof OptimizedRoute
     */
    distance?: number;
    /**
     * The total driving time of the route [s].
     * @type {number}
     * @memberof OptimizedRoute
     */
    drivingTime?: number;
    /**
     * The total service time of the route [s].
     * @type {number}
     * @memberof OptimizedRoute
     */
    serviceTime?: number;
    /**
     * The total waiting time of the route [s].
     * @type {number}
     * @memberof OptimizedRoute
     */
    waitingTime?: number;
    /**
     * The total break time of the route [s].
     * @type {number}
     * @memberof OptimizedRoute
     */
    breakTime?: number;
    /**
     * Returns the transport IDs that could not be planned. These transports are not part of the route.
     * @type {Array<string>}
     * @memberof OptimizedRoute
     */
    unplannedTransportIds?: Array<string>;
}

/**
 * Check if a given object implements the OptimizedRoute interface.
 */
export function instanceOfOptimizedRoute(value: object): value is OptimizedRoute {
    return true;
}

export function OptimizedRouteFromJSON(json: any): OptimizedRoute {
    return OptimizedRouteFromJSONTyped(json, false);
}

export function OptimizedRouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizedRoute {
    if (json == null) {
        return json;
    }
    return {
        
        'route': json['route'] == null ? undefined : ((json['route'] as Array<any>).map(StopFromJSON)),
        'startTime': json['startTime'] == null ? undefined : (new Date(json['startTime'])),
        'endTime': json['endTime'] == null ? undefined : (new Date(json['endTime'])),
        'travelTime': json['travelTime'] == null ? undefined : json['travelTime'],
        'distance': json['distance'] == null ? undefined : json['distance'],
        'drivingTime': json['drivingTime'] == null ? undefined : json['drivingTime'],
        'serviceTime': json['serviceTime'] == null ? undefined : json['serviceTime'],
        'waitingTime': json['waitingTime'] == null ? undefined : json['waitingTime'],
        'breakTime': json['breakTime'] == null ? undefined : json['breakTime'],
        'unplannedTransportIds': json['unplannedTransportIds'] == null ? undefined : json['unplannedTransportIds'],
    };
}

  export function OptimizedRouteToJSON(json: any): OptimizedRoute {
      return OptimizedRouteToJSONTyped(json, false);
  }

  export function OptimizedRouteToJSONTyped(value?: OptimizedRoute | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'route': value['route'] == null ? undefined : ((value['route'] as Array<any>).map(StopToJSON)),
        'startTime': value['startTime'] == null ? undefined : ((value['startTime']).toISOString()),
        'endTime': value['endTime'] == null ? undefined : ((value['endTime']).toISOString()),
        'travelTime': value['travelTime'],
        'distance': value['distance'],
        'drivingTime': value['drivingTime'],
        'serviceTime': value['serviceTime'],
        'waitingTime': value['waitingTime'],
        'breakTime': value['breakTime'],
        'unplannedTransportIds': value['unplannedTransportIds'],
    };
}

