/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Defines when a break becomes necessary and how long it should be. See [here](./concepts/drivers-working-hours) for more information.
 * @export
 * @interface BreakRule
 */
export interface BreakRule {
    /**
     * The minimum duration of a break [s]. Minimum is 15 minutes, maximum is 1 hour 30 minutes.
     * @type {number}
     * @memberof BreakRule
     */
    breakTime: number;
    /**
     * Maximum duration that the driver is allowed to drive [s] before taking a break. The maximum driving time is considered as infinite if it is not set.
     * @type {number}
     * @memberof BreakRule
     */
    maximumDrivingTimeBetweenBreaks?: number | null;
    /**
     * Maximum duration that the driver is allowed to work [s] before taking a break. The maximum working time is considered as infinite if it is not set.
     * @type {number}
     * @memberof BreakRule
     */
    maximumWorkingTimeBetweenBreaks?: number | null;
    /**
     * Idle time of the driver counts as working time if it is shorter than this value [s]. May not be higher than **breakTime**.
     * @type {number}
     * @memberof BreakRule
     */
    workingTimeThreshold?: number;
}

/**
 * Check if a given object implements the BreakRule interface.
 */
export function instanceOfBreakRule(value: object): value is BreakRule {
    if (!('breakTime' in value) || value['breakTime'] === undefined) return false;
    return true;
}

export function BreakRuleFromJSON(json: any): BreakRule {
    return BreakRuleFromJSONTyped(json, false);
}

export function BreakRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): BreakRule {
    if (json == null) {
        return json;
    }
    return {
        
        'breakTime': json['breakTime'],
        'maximumDrivingTimeBetweenBreaks': json['maximumDrivingTimeBetweenBreaks'] == null ? undefined : json['maximumDrivingTimeBetweenBreaks'],
        'maximumWorkingTimeBetweenBreaks': json['maximumWorkingTimeBetweenBreaks'] == null ? undefined : json['maximumWorkingTimeBetweenBreaks'],
        'workingTimeThreshold': json['workingTimeThreshold'] == null ? undefined : json['workingTimeThreshold'],
    };
}

  export function BreakRuleToJSON(json: any): BreakRule {
      return BreakRuleToJSONTyped(json, false);
  }

  export function BreakRuleToJSONTyped(value?: BreakRule | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'breakTime': value['breakTime'],
        'maximumDrivingTimeBetweenBreaks': value['maximumDrivingTimeBetweenBreaks'],
        'maximumWorkingTimeBetweenBreaks': value['maximumWorkingTimeBetweenBreaks'],
        'workingTimeThreshold': value['workingTimeThreshold'],
    };
}

