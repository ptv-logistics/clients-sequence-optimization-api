/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Specifies the type of violation.
 *  * `DRIVER_AVAILABILITY` - The driver availability is violated.
 *  * `ROUTE_START_INTERVAL` - The route start interval is violated. 
 *  * `OPENING_INTERVAL` - The opening intervals of the location are violated.
 *  * `MAXIMUM_TRAVEL_TIME_OF_DRIVER` - Indicates a violation of the maximum allowed travel time of driver as specified by the drivers' working hours restriction.
 *  * `MAXIMUM_DRIVING_TIME_OF_DRIVER` - Indicates a violation of the maximum allowed driving time of driver as specified by the drivers' working hours restriction.
 *  * `MAXIMUM_DISTANCE` - Indicates a violation of the maximum allowed driving distance as specified at the vehicle. 
 *  * `MAXIMUM_NUMBER_OF_CUSTOMER_STOPS` - Indicates a violation of the maximum allowed number of customer stops as specified at the vehicle. 
 *  * `VEHICLE_CAPACITY` - At least one of the vehicle capacities is violated.
 *  * `STOP_POSITION` - Indicates a violation of the position of a stop.
 *  * `ROUTE_SECTION` - Indicates a violation of the route section numbers of a customer stop.
 * @export
 */
export const ViolationType = {
    DRIVER_AVAILABILITY: 'DRIVER_AVAILABILITY',
    ROUTE_START_INTERVAL: 'ROUTE_START_INTERVAL',
    OPENING_INTERVAL: 'OPENING_INTERVAL',
    MAXIMUM_TRAVEL_TIME_OF_DRIVER: 'MAXIMUM_TRAVEL_TIME_OF_DRIVER',
    MAXIMUM_DRIVING_TIME_OF_DRIVER: 'MAXIMUM_DRIVING_TIME_OF_DRIVER',
    MAXIMUM_DISTANCE: 'MAXIMUM_DISTANCE',
    VEHICLE_CAPACITY: 'VEHICLE_CAPACITY',
    STOP_POSITION: 'STOP_POSITION',
    ROUTE_SECTION: 'ROUTE_SECTION'
} as const;
export type ViolationType = typeof ViolationType[keyof typeof ViolationType];


export function instanceOfViolationType(value: any): boolean {
    for (const key in ViolationType) {
        if (Object.prototype.hasOwnProperty.call(ViolationType, key)) {
            if (ViolationType[key as keyof typeof ViolationType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function ViolationTypeFromJSON(json: any): ViolationType {
    return ViolationTypeFromJSONTyped(json, false);
}

export function ViolationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ViolationType {
    return json as ViolationType;
}

export function ViolationTypeToJSON(value?: ViolationType | null): any {
    return value as any;
}

export function ViolationTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): ViolationType {
    return value as ViolationType;
}

