/* tslint:disable */
/* eslint-disable */
/**
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  OptimizationRequest,
  OptimizedRouteIdentifier,
  OptimizedRouteResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OptimizationRequestFromJSON,
    OptimizationRequestToJSON,
    OptimizedRouteIdentifierFromJSON,
    OptimizedRouteIdentifierToJSON,
    OptimizedRouteResponseFromJSON,
    OptimizedRouteResponseToJSON,
} from '../models/index';

export interface DeleteOptimizedRouteRequest {
    id: string;
}

export interface GetOptimizedRouteRequest {
    id: string;
}

export interface StartAndCreateOptimizedRouteRequest {
    optimizationRequest: OptimizationRequest;
    considerTransportPriorities?: boolean;
}

/**
 * 
 */
export class RoutesApi extends runtime.BaseAPI {

    /**
     * Deletes the optimized route whose ID is specified.
     */
    async deleteOptimizedRouteRaw(requestParameters: DeleteOptimizedRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOptimizedRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/routes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the optimized route whose ID is specified.
     */
    async deleteOptimizedRoute(requestParameters: DeleteOptimizedRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOptimizedRouteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
     */
    async getOptimizedRouteRaw(requestParameters: GetOptimizedRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OptimizedRouteResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOptimizedRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/routes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimizedRouteResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
     */
    async getOptimizedRoute(requestParameters: GetOptimizedRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OptimizedRouteResponse> {
        const response = await this.getOptimizedRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
     */
    async startAndCreateOptimizedRouteRaw(requestParameters: StartAndCreateOptimizedRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OptimizedRouteIdentifier>> {
        if (requestParameters['optimizationRequest'] == null) {
            throw new runtime.RequiredError(
                'optimizationRequest',
                'Required parameter "optimizationRequest" was null or undefined when calling startAndCreateOptimizedRoute().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['considerTransportPriorities'] != null) {
            queryParameters['considerTransportPriorities'] = requestParameters['considerTransportPriorities'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/routes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OptimizationRequestToJSON(requestParameters['optimizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimizedRouteIdentifierFromJSON(jsonValue));
    }

    /**
     * Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
     */
    async startAndCreateOptimizedRoute(requestParameters: StartAndCreateOptimizedRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OptimizedRouteIdentifier> {
        const response = await this.startAndCreateOptimizedRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
