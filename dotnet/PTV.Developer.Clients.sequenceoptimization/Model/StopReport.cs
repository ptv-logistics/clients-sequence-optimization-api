/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// A stop report contains a summary of the values of the events at a stop, including the arrival time, the departure time and the service time. It also contains information about the loaded quantities when leaving the current stop.
    /// </summary>
    [DataContract(Name = "StopReport")]
    public partial class StopReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StopReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StopReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StopReport" /> class.
        /// </summary>
        /// <param name="arrivalTime">The planned time of arrival at the stop according to [RFC 3339](https://tools.ietf.org/html/rfc3339). (required).</param>
        /// <param name="departureTime">The planned time of departure from the stop according to [RFC 3339](https://tools.ietf.org/html/rfc3339). (required).</param>
        /// <param name="serviceTime">The service time at the stop [s]. (required).</param>
        /// <param name="waitingTime">The waiting time at the stop [s]. (required).</param>
        /// <param name="breakTime">The break time at the stop [s]. (required).</param>
        /// <param name="quantities">The quantities loaded on the vehicle when leaving the stop..</param>
        public StopReport(DateTimeOffset arrivalTime = default(DateTimeOffset), DateTimeOffset departureTime = default(DateTimeOffset), int? serviceTime = default(int?), int? waitingTime = default(int?), int? breakTime = default(int?), List<int?> quantities = default(List<int?>))
        {
            this.ArrivalTime = arrivalTime;
            this.DepartureTime = departureTime;
            // to ensure "serviceTime" is required (not null)
            if (serviceTime == null)
            {
                throw new ArgumentNullException("serviceTime is a required property for StopReport and cannot be null");
            }
            this.ServiceTime = serviceTime;
            // to ensure "waitingTime" is required (not null)
            if (waitingTime == null)
            {
                throw new ArgumentNullException("waitingTime is a required property for StopReport and cannot be null");
            }
            this.WaitingTime = waitingTime;
            // to ensure "breakTime" is required (not null)
            if (breakTime == null)
            {
                throw new ArgumentNullException("breakTime is a required property for StopReport and cannot be null");
            }
            this.BreakTime = breakTime;
            this.Quantities = quantities;
        }

        /// <summary>
        /// The planned time of arrival at the stop according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        /// <value>The planned time of arrival at the stop according to [RFC 3339](https://tools.ietf.org/html/rfc3339).</value>
        [DataMember(Name = "arrivalTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ArrivalTime { get; set; }

        /// <summary>
        /// The planned time of departure from the stop according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        /// <value>The planned time of departure from the stop according to [RFC 3339](https://tools.ietf.org/html/rfc3339).</value>
        [DataMember(Name = "departureTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset DepartureTime { get; set; }

        /// <summary>
        /// The service time at the stop [s].
        /// </summary>
        /// <value>The service time at the stop [s].</value>
        [DataMember(Name = "serviceTime", IsRequired = true, EmitDefaultValue = true)]
        public int? ServiceTime { get; set; }

        /// <summary>
        /// The waiting time at the stop [s].
        /// </summary>
        /// <value>The waiting time at the stop [s].</value>
        [DataMember(Name = "waitingTime", IsRequired = true, EmitDefaultValue = true)]
        public int? WaitingTime { get; set; }

        /// <summary>
        /// The break time at the stop [s].
        /// </summary>
        /// <value>The break time at the stop [s].</value>
        [DataMember(Name = "breakTime", IsRequired = true, EmitDefaultValue = true)]
        public int? BreakTime { get; set; }

        /// <summary>
        /// The quantities loaded on the vehicle when leaving the stop.
        /// </summary>
        /// <value>The quantities loaded on the vehicle when leaving the stop.</value>
        [DataMember(Name = "quantities", EmitDefaultValue = false)]
        public List<int?> Quantities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StopReport {\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  ServiceTime: ").Append(ServiceTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  BreakTime: ").Append(BreakTime).Append("\n");
            sb.Append("  Quantities: ").Append(Quantities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
