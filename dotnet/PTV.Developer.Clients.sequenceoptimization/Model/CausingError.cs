/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// CausingError
    /// </summary>
    [DataContract(Name = "CausingError")]
    public partial class CausingError : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CausingError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CausingError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CausingError" /> class.
        /// </summary>
        /// <param name="description">A human readable message that describes the error. (required).</param>
        /// <param name="errorCode">A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **value**. * &#x60;GENERAL_INVALID_VALUE&#x60; - A parameter is set to an invalid value.   * &#x60;value&#x60; - The invalid value.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **Error codes for** &#x60;GENERAL_VALIDATION_ERROR&#x60; * &#x60;GENERAL_INVALID_VALUE&#x60; - A parameter is set to an invalid value.   * &#x60;value&#x60; - The invalid value. * &#x60;GENERAL_UNRECOGNIZED_PARAMETER&#x60; - A parameter is unknown. * &#x60;GENERAL_MISSING_PARAMETER&#x60; - A required parameter is missing. * &#x60;GENERAL_INVALID_INTERVAL&#x60; - A time interval is invalid, i.e. start is greater than end. * &#x60;GENERAL_MINIMUM_LENGTH_VIOLATED&#x60; - The minimum length is violated.   * &#x60;minimumLength&#x60; - The minimum length (integer). * &#x60;GENERAL_MAXIMUM_LENGTH_VIOLATED&#x60; - The maximum length is violated.   * &#x60;maximumLength&#x60; - The maximum length (integer). * &#x60;GENERAL_DUPLICATE_ID&#x60; - Two or more objects of the same type have the same ID.   * &#x60;value&#x60; - The duplicated value.   * &#x60;indexes&#x60; - The list indexes of the objects with the same ID. * &#x60;GENERAL_MINIMUM_VALUE_VIOLATED&#x60; - The minimum value restriction is violated.   * &#x60;minimumValue&#x60; - The minimum value (integer or double). * &#x60;GENERAL_MAXIMUM_VALUE_VIOLATED&#x60; - The maximum value restriction is violated.   * &#x60;maximumValue&#x60; - The maximum value (integer or double). * &#x60;GENERAL_DUPLICATE_PARAMETER&#x60; - A parameter is duplicated. * &#x60;SEQUENCEOPTIMIZATION_EMPTY_ID&#x60; - The ID is empty or contains only whitespace. * &#x60;SEQUENCEOPTIMIZATION_LOCATION_CANNOT_BE_MATCHED&#x60; - The location cannot be matched to a street and no airline distance fallback is possible. * &#x60;SEQUENCEOPTIMIZATION_DUPLICATE_TRANSPORT&#x60; - The transport with ID &#39;&#39; is picked up and/or delivered multiple times.   * &#x60;transportId&#x60; - The duplicated transport ID. * &#x60;SEQUENCEOPTIMIZATION_ILLEGAL_EMPTY_STOP&#x60; - Empty stops without any pickup or delivery are only allowed for the vehicle start/end location. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_EXECUTED_BEFORE_PICKUP&#x60; - Delivery of transport with ID &#39;&#39; is executed before the corresponding pickup.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_NO_TRANSPORT_IN_ROUTE&#x60; - There is no transport in the route. Please add a transport or remove the whole route. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_MISSING_IN_ROUTE&#x60; - Delivery of transport with ID &#39;&#39; is missing in the given route. Pickup and delivery of a transport must either both be planned or must both remain unplanned.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_MISSING_IN_ROUTE&#x60; - Pickup of transport with ID &#39;&#39; is missing in the given route. Pickup and delivery of a transport must either both be planned or must both remain unplanned.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_EQUAL_TO_DELIVERY_LOCATION&#x60; - Pickup and delivery of transport with ID &#39;&#39; are at the same location. Pickup and delivery of a transport need to be at different locations.   * &#x60;transportId&#x60; - The transport ID.   * &#x60;locationId&#x60; - The location ID of the transport pickup and delivery. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_MISSING_IN_LOCATIONS&#x60; - The locations list does not contain the pickup location with ID &#39;&#39;.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_MISSING_IN_LOCATIONS&#x60; - The locations list does not contain the delivery location with ID &#39;&#39;.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_VEHICLE_START_LOCATION_MISSING_IN_ROUTE&#x60; - Vehicle start location must be the first stop of the vehicle route.   * &#x60;expectedLocationIdOfFirstStop&#x60; - The expected location ID of the first stop of the route which is the given vehicle start location.   * &#x60;actualLocationIdOfFirstStop&#x60; - The actual location ID of the first stop of the route. * &#x60;SEQUENCEOPTIMIZATION_VEHICLE_END_LOCATION_MISSING_IN_ROUTE&#x60; - Vehicle end location must be the last stop of the vehicle route.   * &#x60;expectedLocationIdOfLastStop&#x60; - The expected location ID of the last stop of the route which is the given vehicle end location.   * &#x60;actualLocationIdOfLastStop&#x60; - The actual location ID of the last stop of the route. * &#x60;SEQUENCEOPTIMIZATION_INCONSISTENT_NUMBER_OF_QUANTITIES_AND_CAPACITIES&#x60; - The list of the capacities of the vehicle and the list of the quantities of all transports must have the same length. The reference list is given in the parameter field.   * &#x60;expectedLength&#x60; - The expected length of the list.   * &#x60;vehicleHasInconsistentCapacity&#x60; - If true the vehicle has the wrong number of capacities.   * &#x60;transportIndexes&#x60; - The list indexes of the transports with the wrong number of quantities. * &#x60;SEQUENCEOPTIMIZATION_UNKNOWN_LOCATION_ID&#x60; - A location with ID &#39;&#39; does not exist in the locations list.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_UNREFERENCED_LOCATIONS&#x60; - Locations with IDs &#39;&#39; are not referenced or used anywhere. These and all other unreferenced locations must be left out.   * &#x60;locationIds&#x60; - The IDs of some unreferenced locations. * &#x60;SEQUENCEOPTIMIZATION_UNKNOWN_TRANSPORT_ID&#x60; - A transport with ID &#39;&#39; does not exist in the transports list.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_AT_UNEXPECTED_LOCATION&#x60; - Transport with ID &#39;&#39; should not be picked up at this location.   * &#x60;transportId&#x60; - The ID of the transport which is picked up at an unexpected location.   * &#x60;expectedPickupLocationId&#x60; - The location ID where transport should be picked up.   * &#x60;actualPickupLocationId&#x60; - The location ID of the stop where transport is actually picked up. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_AT_UNEXPECTED_LOCATION&#x60; - Transport with ID &#39;&#39; should not be delivered at this location.   * &#x60;transportId&#x60; - The ID of the transport which is delivered at an unexpected location.   * &#x60;expectedDeliveryLocationId&#x60; - The location ID where transport should be delivered.   * &#x60;actualDeliveryLocationId&#x60; - The location ID of the stop where transport is actually delivered. * &#x60;SEQUENCEOPTIMIZATION_ILLEGAL_SPLIT_STOP&#x60; - Subsequent stops at the same location are not allowed. The given stops must be merged to one stop.   * &#x60;stopIndexes&#x60; - The list indexes of the stops which should be merged. * &#x60;SEQUENCEOPTIMIZATION_INVALID_LOADING_SEQUENCE&#x60; - A location in a route is left with unfinished tasks: Either a location is left although there is still load FOR it on the vehicle or a location is visited again although there are still pickups FROM it on the vehicle.   * &#x60;locationId&#x60; - The location ID with unfinished tasks. * &#x60;SEQUENCEOPTIMIZATION_AVAILABILITY_TOO_LONG&#x60; - The driver availability must not be longer than 24 hours. * &#x60;SEQUENCEOPTIMIZATION_ROUTE_STRUCTURE_VIOLATED&#x60; - Route structure violated. * &#x60;SEQUENCEOPTIMIZATION_OPERATION_IN_PROCESS&#x60; - Optimized route with ID &#39;&#39; is being processed. Please wait or terminate current optimization process.   * &#x60;Id&#x60; - The optimized route ID. * &#x60;SEQUENCEOPTIMIZATION_HPR_NETWORK_FOR_PROFILE_NOT_AVAILABLE&#x60; - High performance routing network is not available for profile:    * &#x60;profile&#x60; - The profile for which the high performance routing network is not available. * &#x60;SEQUENCEOPTIMIZATION_LOCATIONS_TOO_FAR_AWAY&#x60; - Locations or their road access coordinates are too far away from each other when using vehicle profile &#39;&#39;. All locations and road access coordinates have to be inside a rectangle with edges of at most &#39;&#39; km length.   * &#x60;profile&#x60; - The profile for which the locations are too far away from each other.  * &#x60;distance&#x60; - The maximum allowed distance in km.  **Error codes for** &#x60;SEQUENCEOPTIMIZATION_RESTRICTION_EXCEEDED&#x60; * &#x60;SEQUENCEOPTIMIZATION_NUMBER_OF_TRANSPORTS_EXCEEDED&#x60; - The request contains too many transports.   * &#x60;transports&#x60; - The number of transports.   * &#x60;limit&#x60; - The maximum number of transports.  **Error codes for** &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; * &#x60;GENERAL_INVALID_ID&#x60; - The ID does not exist.   * &#x60;value&#x60; - The invalid ID. (required).</param>
        /// <param name="varParameter">The name of the affected query or path parameter or a JSONPath to the affected property of the request..</param>
        /// <param name="details">Additional properties specific to this error class..</param>
        public CausingError(string description = default(string), string errorCode = default(string), string varParameter = default(string), Dictionary<string, Object> details = default(Dictionary<string, Object>))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CausingError and cannot be null");
            }
            this.Description = description;
            // to ensure "errorCode" is required (not null)
            if (errorCode == null)
            {
                throw new ArgumentNullException("errorCode is a required property for CausingError and cannot be null");
            }
            this.ErrorCode = errorCode;
            this.Parameter = varParameter;
            this.Details = details;
        }

        /// <summary>
        /// A human readable message that describes the error.
        /// </summary>
        /// <value>A human readable message that describes the error.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **value**. * &#x60;GENERAL_INVALID_VALUE&#x60; - A parameter is set to an invalid value.   * &#x60;value&#x60; - The invalid value.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **Error codes for** &#x60;GENERAL_VALIDATION_ERROR&#x60; * &#x60;GENERAL_INVALID_VALUE&#x60; - A parameter is set to an invalid value.   * &#x60;value&#x60; - The invalid value. * &#x60;GENERAL_UNRECOGNIZED_PARAMETER&#x60; - A parameter is unknown. * &#x60;GENERAL_MISSING_PARAMETER&#x60; - A required parameter is missing. * &#x60;GENERAL_INVALID_INTERVAL&#x60; - A time interval is invalid, i.e. start is greater than end. * &#x60;GENERAL_MINIMUM_LENGTH_VIOLATED&#x60; - The minimum length is violated.   * &#x60;minimumLength&#x60; - The minimum length (integer). * &#x60;GENERAL_MAXIMUM_LENGTH_VIOLATED&#x60; - The maximum length is violated.   * &#x60;maximumLength&#x60; - The maximum length (integer). * &#x60;GENERAL_DUPLICATE_ID&#x60; - Two or more objects of the same type have the same ID.   * &#x60;value&#x60; - The duplicated value.   * &#x60;indexes&#x60; - The list indexes of the objects with the same ID. * &#x60;GENERAL_MINIMUM_VALUE_VIOLATED&#x60; - The minimum value restriction is violated.   * &#x60;minimumValue&#x60; - The minimum value (integer or double). * &#x60;GENERAL_MAXIMUM_VALUE_VIOLATED&#x60; - The maximum value restriction is violated.   * &#x60;maximumValue&#x60; - The maximum value (integer or double). * &#x60;GENERAL_DUPLICATE_PARAMETER&#x60; - A parameter is duplicated. * &#x60;SEQUENCEOPTIMIZATION_EMPTY_ID&#x60; - The ID is empty or contains only whitespace. * &#x60;SEQUENCEOPTIMIZATION_LOCATION_CANNOT_BE_MATCHED&#x60; - The location cannot be matched to a street and no airline distance fallback is possible. * &#x60;SEQUENCEOPTIMIZATION_DUPLICATE_TRANSPORT&#x60; - The transport with ID &#39;&#39; is picked up and/or delivered multiple times.   * &#x60;transportId&#x60; - The duplicated transport ID. * &#x60;SEQUENCEOPTIMIZATION_ILLEGAL_EMPTY_STOP&#x60; - Empty stops without any pickup or delivery are only allowed for the vehicle start/end location. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_EXECUTED_BEFORE_PICKUP&#x60; - Delivery of transport with ID &#39;&#39; is executed before the corresponding pickup.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_NO_TRANSPORT_IN_ROUTE&#x60; - There is no transport in the route. Please add a transport or remove the whole route. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_MISSING_IN_ROUTE&#x60; - Delivery of transport with ID &#39;&#39; is missing in the given route. Pickup and delivery of a transport must either both be planned or must both remain unplanned.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_MISSING_IN_ROUTE&#x60; - Pickup of transport with ID &#39;&#39; is missing in the given route. Pickup and delivery of a transport must either both be planned or must both remain unplanned.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_EQUAL_TO_DELIVERY_LOCATION&#x60; - Pickup and delivery of transport with ID &#39;&#39; are at the same location. Pickup and delivery of a transport need to be at different locations.   * &#x60;transportId&#x60; - The transport ID.   * &#x60;locationId&#x60; - The location ID of the transport pickup and delivery. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_MISSING_IN_LOCATIONS&#x60; - The locations list does not contain the pickup location with ID &#39;&#39;.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_MISSING_IN_LOCATIONS&#x60; - The locations list does not contain the delivery location with ID &#39;&#39;.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_VEHICLE_START_LOCATION_MISSING_IN_ROUTE&#x60; - Vehicle start location must be the first stop of the vehicle route.   * &#x60;expectedLocationIdOfFirstStop&#x60; - The expected location ID of the first stop of the route which is the given vehicle start location.   * &#x60;actualLocationIdOfFirstStop&#x60; - The actual location ID of the first stop of the route. * &#x60;SEQUENCEOPTIMIZATION_VEHICLE_END_LOCATION_MISSING_IN_ROUTE&#x60; - Vehicle end location must be the last stop of the vehicle route.   * &#x60;expectedLocationIdOfLastStop&#x60; - The expected location ID of the last stop of the route which is the given vehicle end location.   * &#x60;actualLocationIdOfLastStop&#x60; - The actual location ID of the last stop of the route. * &#x60;SEQUENCEOPTIMIZATION_INCONSISTENT_NUMBER_OF_QUANTITIES_AND_CAPACITIES&#x60; - The list of the capacities of the vehicle and the list of the quantities of all transports must have the same length. The reference list is given in the parameter field.   * &#x60;expectedLength&#x60; - The expected length of the list.   * &#x60;vehicleHasInconsistentCapacity&#x60; - If true the vehicle has the wrong number of capacities.   * &#x60;transportIndexes&#x60; - The list indexes of the transports with the wrong number of quantities. * &#x60;SEQUENCEOPTIMIZATION_UNKNOWN_LOCATION_ID&#x60; - A location with ID &#39;&#39; does not exist in the locations list.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_UNREFERENCED_LOCATIONS&#x60; - Locations with IDs &#39;&#39; are not referenced or used anywhere. These and all other unreferenced locations must be left out.   * &#x60;locationIds&#x60; - The IDs of some unreferenced locations. * &#x60;SEQUENCEOPTIMIZATION_UNKNOWN_TRANSPORT_ID&#x60; - A transport with ID &#39;&#39; does not exist in the transports list.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_AT_UNEXPECTED_LOCATION&#x60; - Transport with ID &#39;&#39; should not be picked up at this location.   * &#x60;transportId&#x60; - The ID of the transport which is picked up at an unexpected location.   * &#x60;expectedPickupLocationId&#x60; - The location ID where transport should be picked up.   * &#x60;actualPickupLocationId&#x60; - The location ID of the stop where transport is actually picked up. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_AT_UNEXPECTED_LOCATION&#x60; - Transport with ID &#39;&#39; should not be delivered at this location.   * &#x60;transportId&#x60; - The ID of the transport which is delivered at an unexpected location.   * &#x60;expectedDeliveryLocationId&#x60; - The location ID where transport should be delivered.   * &#x60;actualDeliveryLocationId&#x60; - The location ID of the stop where transport is actually delivered. * &#x60;SEQUENCEOPTIMIZATION_ILLEGAL_SPLIT_STOP&#x60; - Subsequent stops at the same location are not allowed. The given stops must be merged to one stop.   * &#x60;stopIndexes&#x60; - The list indexes of the stops which should be merged. * &#x60;SEQUENCEOPTIMIZATION_INVALID_LOADING_SEQUENCE&#x60; - A location in a route is left with unfinished tasks: Either a location is left although there is still load FOR it on the vehicle or a location is visited again although there are still pickups FROM it on the vehicle.   * &#x60;locationId&#x60; - The location ID with unfinished tasks. * &#x60;SEQUENCEOPTIMIZATION_AVAILABILITY_TOO_LONG&#x60; - The driver availability must not be longer than 24 hours. * &#x60;SEQUENCEOPTIMIZATION_ROUTE_STRUCTURE_VIOLATED&#x60; - Route structure violated. * &#x60;SEQUENCEOPTIMIZATION_OPERATION_IN_PROCESS&#x60; - Optimized route with ID &#39;&#39; is being processed. Please wait or terminate current optimization process.   * &#x60;Id&#x60; - The optimized route ID. * &#x60;SEQUENCEOPTIMIZATION_HPR_NETWORK_FOR_PROFILE_NOT_AVAILABLE&#x60; - High performance routing network is not available for profile:    * &#x60;profile&#x60; - The profile for which the high performance routing network is not available. * &#x60;SEQUENCEOPTIMIZATION_LOCATIONS_TOO_FAR_AWAY&#x60; - Locations or their road access coordinates are too far away from each other when using vehicle profile &#39;&#39;. All locations and road access coordinates have to be inside a rectangle with edges of at most &#39;&#39; km length.   * &#x60;profile&#x60; - The profile for which the locations are too far away from each other.  * &#x60;distance&#x60; - The maximum allowed distance in km.  **Error codes for** &#x60;SEQUENCEOPTIMIZATION_RESTRICTION_EXCEEDED&#x60; * &#x60;SEQUENCEOPTIMIZATION_NUMBER_OF_TRANSPORTS_EXCEEDED&#x60; - The request contains too many transports.   * &#x60;transports&#x60; - The number of transports.   * &#x60;limit&#x60; - The maximum number of transports.  **Error codes for** &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; * &#x60;GENERAL_INVALID_ID&#x60; - The ID does not exist.   * &#x60;value&#x60; - The invalid ID.
        /// </summary>
        /// <value>A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **value**. * &#x60;GENERAL_INVALID_VALUE&#x60; - A parameter is set to an invalid value.   * &#x60;value&#x60; - The invalid value.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **Error codes for** &#x60;GENERAL_VALIDATION_ERROR&#x60; * &#x60;GENERAL_INVALID_VALUE&#x60; - A parameter is set to an invalid value.   * &#x60;value&#x60; - The invalid value. * &#x60;GENERAL_UNRECOGNIZED_PARAMETER&#x60; - A parameter is unknown. * &#x60;GENERAL_MISSING_PARAMETER&#x60; - A required parameter is missing. * &#x60;GENERAL_INVALID_INTERVAL&#x60; - A time interval is invalid, i.e. start is greater than end. * &#x60;GENERAL_MINIMUM_LENGTH_VIOLATED&#x60; - The minimum length is violated.   * &#x60;minimumLength&#x60; - The minimum length (integer). * &#x60;GENERAL_MAXIMUM_LENGTH_VIOLATED&#x60; - The maximum length is violated.   * &#x60;maximumLength&#x60; - The maximum length (integer). * &#x60;GENERAL_DUPLICATE_ID&#x60; - Two or more objects of the same type have the same ID.   * &#x60;value&#x60; - The duplicated value.   * &#x60;indexes&#x60; - The list indexes of the objects with the same ID. * &#x60;GENERAL_MINIMUM_VALUE_VIOLATED&#x60; - The minimum value restriction is violated.   * &#x60;minimumValue&#x60; - The minimum value (integer or double). * &#x60;GENERAL_MAXIMUM_VALUE_VIOLATED&#x60; - The maximum value restriction is violated.   * &#x60;maximumValue&#x60; - The maximum value (integer or double). * &#x60;GENERAL_DUPLICATE_PARAMETER&#x60; - A parameter is duplicated. * &#x60;SEQUENCEOPTIMIZATION_EMPTY_ID&#x60; - The ID is empty or contains only whitespace. * &#x60;SEQUENCEOPTIMIZATION_LOCATION_CANNOT_BE_MATCHED&#x60; - The location cannot be matched to a street and no airline distance fallback is possible. * &#x60;SEQUENCEOPTIMIZATION_DUPLICATE_TRANSPORT&#x60; - The transport with ID &#39;&#39; is picked up and/or delivered multiple times.   * &#x60;transportId&#x60; - The duplicated transport ID. * &#x60;SEQUENCEOPTIMIZATION_ILLEGAL_EMPTY_STOP&#x60; - Empty stops without any pickup or delivery are only allowed for the vehicle start/end location. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_EXECUTED_BEFORE_PICKUP&#x60; - Delivery of transport with ID &#39;&#39; is executed before the corresponding pickup.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_NO_TRANSPORT_IN_ROUTE&#x60; - There is no transport in the route. Please add a transport or remove the whole route. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_MISSING_IN_ROUTE&#x60; - Delivery of transport with ID &#39;&#39; is missing in the given route. Pickup and delivery of a transport must either both be planned or must both remain unplanned.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_MISSING_IN_ROUTE&#x60; - Pickup of transport with ID &#39;&#39; is missing in the given route. Pickup and delivery of a transport must either both be planned or must both remain unplanned.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_EQUAL_TO_DELIVERY_LOCATION&#x60; - Pickup and delivery of transport with ID &#39;&#39; are at the same location. Pickup and delivery of a transport need to be at different locations.   * &#x60;transportId&#x60; - The transport ID.   * &#x60;locationId&#x60; - The location ID of the transport pickup and delivery. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_MISSING_IN_LOCATIONS&#x60; - The locations list does not contain the pickup location with ID &#39;&#39;.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_MISSING_IN_LOCATIONS&#x60; - The locations list does not contain the delivery location with ID &#39;&#39;.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_VEHICLE_START_LOCATION_MISSING_IN_ROUTE&#x60; - Vehicle start location must be the first stop of the vehicle route.   * &#x60;expectedLocationIdOfFirstStop&#x60; - The expected location ID of the first stop of the route which is the given vehicle start location.   * &#x60;actualLocationIdOfFirstStop&#x60; - The actual location ID of the first stop of the route. * &#x60;SEQUENCEOPTIMIZATION_VEHICLE_END_LOCATION_MISSING_IN_ROUTE&#x60; - Vehicle end location must be the last stop of the vehicle route.   * &#x60;expectedLocationIdOfLastStop&#x60; - The expected location ID of the last stop of the route which is the given vehicle end location.   * &#x60;actualLocationIdOfLastStop&#x60; - The actual location ID of the last stop of the route. * &#x60;SEQUENCEOPTIMIZATION_INCONSISTENT_NUMBER_OF_QUANTITIES_AND_CAPACITIES&#x60; - The list of the capacities of the vehicle and the list of the quantities of all transports must have the same length. The reference list is given in the parameter field.   * &#x60;expectedLength&#x60; - The expected length of the list.   * &#x60;vehicleHasInconsistentCapacity&#x60; - If true the vehicle has the wrong number of capacities.   * &#x60;transportIndexes&#x60; - The list indexes of the transports with the wrong number of quantities. * &#x60;SEQUENCEOPTIMIZATION_UNKNOWN_LOCATION_ID&#x60; - A location with ID &#39;&#39; does not exist in the locations list.   * &#x60;locationId&#x60; - The location ID. * &#x60;SEQUENCEOPTIMIZATION_UNREFERENCED_LOCATIONS&#x60; - Locations with IDs &#39;&#39; are not referenced or used anywhere. These and all other unreferenced locations must be left out.   * &#x60;locationIds&#x60; - The IDs of some unreferenced locations. * &#x60;SEQUENCEOPTIMIZATION_UNKNOWN_TRANSPORT_ID&#x60; - A transport with ID &#39;&#39; does not exist in the transports list.   * &#x60;transportId&#x60; - The transport ID. * &#x60;SEQUENCEOPTIMIZATION_PICKUP_AT_UNEXPECTED_LOCATION&#x60; - Transport with ID &#39;&#39; should not be picked up at this location.   * &#x60;transportId&#x60; - The ID of the transport which is picked up at an unexpected location.   * &#x60;expectedPickupLocationId&#x60; - The location ID where transport should be picked up.   * &#x60;actualPickupLocationId&#x60; - The location ID of the stop where transport is actually picked up. * &#x60;SEQUENCEOPTIMIZATION_DELIVERY_AT_UNEXPECTED_LOCATION&#x60; - Transport with ID &#39;&#39; should not be delivered at this location.   * &#x60;transportId&#x60; - The ID of the transport which is delivered at an unexpected location.   * &#x60;expectedDeliveryLocationId&#x60; - The location ID where transport should be delivered.   * &#x60;actualDeliveryLocationId&#x60; - The location ID of the stop where transport is actually delivered. * &#x60;SEQUENCEOPTIMIZATION_ILLEGAL_SPLIT_STOP&#x60; - Subsequent stops at the same location are not allowed. The given stops must be merged to one stop.   * &#x60;stopIndexes&#x60; - The list indexes of the stops which should be merged. * &#x60;SEQUENCEOPTIMIZATION_INVALID_LOADING_SEQUENCE&#x60; - A location in a route is left with unfinished tasks: Either a location is left although there is still load FOR it on the vehicle or a location is visited again although there are still pickups FROM it on the vehicle.   * &#x60;locationId&#x60; - The location ID with unfinished tasks. * &#x60;SEQUENCEOPTIMIZATION_AVAILABILITY_TOO_LONG&#x60; - The driver availability must not be longer than 24 hours. * &#x60;SEQUENCEOPTIMIZATION_ROUTE_STRUCTURE_VIOLATED&#x60; - Route structure violated. * &#x60;SEQUENCEOPTIMIZATION_OPERATION_IN_PROCESS&#x60; - Optimized route with ID &#39;&#39; is being processed. Please wait or terminate current optimization process.   * &#x60;Id&#x60; - The optimized route ID. * &#x60;SEQUENCEOPTIMIZATION_HPR_NETWORK_FOR_PROFILE_NOT_AVAILABLE&#x60; - High performance routing network is not available for profile:    * &#x60;profile&#x60; - The profile for which the high performance routing network is not available. * &#x60;SEQUENCEOPTIMIZATION_LOCATIONS_TOO_FAR_AWAY&#x60; - Locations or their road access coordinates are too far away from each other when using vehicle profile &#39;&#39;. All locations and road access coordinates have to be inside a rectangle with edges of at most &#39;&#39; km length.   * &#x60;profile&#x60; - The profile for which the locations are too far away from each other.  * &#x60;distance&#x60; - The maximum allowed distance in km.  **Error codes for** &#x60;SEQUENCEOPTIMIZATION_RESTRICTION_EXCEEDED&#x60; * &#x60;SEQUENCEOPTIMIZATION_NUMBER_OF_TRANSPORTS_EXCEEDED&#x60; - The request contains too many transports.   * &#x60;transports&#x60; - The number of transports.   * &#x60;limit&#x60; - The maximum number of transports.  **Error codes for** &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; * &#x60;GENERAL_INVALID_ID&#x60; - The ID does not exist.   * &#x60;value&#x60; - The invalid ID.</value>
        [DataMember(Name = "errorCode", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// The name of the affected query or path parameter or a JSONPath to the affected property of the request.
        /// </summary>
        /// <value>The name of the affected query or path parameter or a JSONPath to the affected property of the request.</value>
        [DataMember(Name = "parameter", EmitDefaultValue = false)]
        public string Parameter { get; set; }

        /// <summary>
        /// Additional properties specific to this error class.
        /// </summary>
        /// <value>Additional properties specific to this error class.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public Dictionary<string, Object> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CausingError {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Parameter: ").Append(Parameter).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
