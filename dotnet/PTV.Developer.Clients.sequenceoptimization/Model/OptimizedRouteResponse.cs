/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// Contains the results of an optimization. If the &#39;status&#39; is &#39;RUNNING&#39;, the calculation is still running and no further properties are set. If the &#39;status&#39; is &#39;SUCCEEDED&#39;, the optimization result is present as property &#39;optimizedRoute&#39;. If the &#39;status&#39; is &#39;FAILED&#39;, the failure result is present as property &#39;error&#39;.
    /// </summary>
    [DataContract(Name = "OptimizedRouteResponse")]
    public partial class OptimizedRouteResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public OperationStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizedRouteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptimizedRouteResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizedRouteResponse" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="optimizedRoute">optimizedRoute.</param>
        /// <param name="error">A human readable message that describes the error. Set and used only when operation status is FAILED..</param>
        /// <param name="warnings">A list of warnings concerning the validity of the result..</param>
        public OptimizedRouteResponse(OperationStatus status = default(OperationStatus), OptimizedRoute optimizedRoute = default(OptimizedRoute), ErrorResponse error = default(ErrorResponse), List<Warning> warnings = default(List<Warning>))
        {
            this.Status = status;
            this.OptimizedRoute = optimizedRoute;
            this.Error = error;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets OptimizedRoute
        /// </summary>
        [DataMember(Name = "optimizedRoute", EmitDefaultValue = false)]
        public OptimizedRoute OptimizedRoute { get; set; }

        /// <summary>
        /// A human readable message that describes the error. Set and used only when operation status is FAILED.
        /// </summary>
        /// <value>A human readable message that describes the error. Set and used only when operation status is FAILED.</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public ErrorResponse Error { get; set; }

        /// <summary>
        /// A list of warnings concerning the validity of the result.
        /// </summary>
        /// <value>A list of warnings concerning the validity of the result.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizedRouteResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OptimizedRoute: ").Append(OptimizedRoute).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
