/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// Defines the accumulated driving and working times since the last break.  See [here](./concepts/drivers-working-hours) for more information.
    /// </summary>
    [DataContract(Name = "WorkLogbook")]
    public partial class WorkLogbook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkLogbook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkLogbook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkLogbook" /> class.
        /// </summary>
        /// <param name="lastTimeTheDriverWorked">The last time the driver worked formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00. The date must provide an offset to UTC. (required).</param>
        /// <param name="accumulatedDrivingTimeSinceLastBreak">Accumulated driving time since end of last break [s], this includes all time behind the wheel. Values higher than **maximumDrivingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumDrivingTimeBetweenBreaks**. If no other value is specified, the value defaults to 0. The value counts towards **maximumDrivingTime** if the latter is specified. (default to 0).</param>
        /// <param name="accumulatedWorkingTimeSinceLastBreak">Accumulated working time since end of last break [s], this includes driving time, service time at depot and customers, and idle time if lower than working time threshold. Values higher than **maximumWorkingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumWorkingTimeBetweenBreaks**. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the value defaults to **accumulatedDrivingTimeBetweenBreaks**. The value counts towards **maximumWorkingTime** if the latter is specified..</param>
        public WorkLogbook(DateTimeOffset lastTimeTheDriverWorked = default(DateTimeOffset), int? accumulatedDrivingTimeSinceLastBreak = 0, int? accumulatedWorkingTimeSinceLastBreak = default(int?))
        {
            this.LastTimeTheDriverWorked = lastTimeTheDriverWorked;
            // use default value if no "accumulatedDrivingTimeSinceLastBreak" provided
            this.AccumulatedDrivingTimeSinceLastBreak = accumulatedDrivingTimeSinceLastBreak ?? 0;
            this.AccumulatedWorkingTimeSinceLastBreak = accumulatedWorkingTimeSinceLastBreak;
        }

        /// <summary>
        /// The last time the driver worked formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00. The date must provide an offset to UTC.
        /// </summary>
        /// <value>The last time the driver worked formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00. The date must provide an offset to UTC.</value>
        [DataMember(Name = "lastTimeTheDriverWorked", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset LastTimeTheDriverWorked { get; set; }

        /// <summary>
        /// Accumulated driving time since end of last break [s], this includes all time behind the wheel. Values higher than **maximumDrivingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumDrivingTimeBetweenBreaks**. If no other value is specified, the value defaults to 0. The value counts towards **maximumDrivingTime** if the latter is specified.
        /// </summary>
        /// <value>Accumulated driving time since end of last break [s], this includes all time behind the wheel. Values higher than **maximumDrivingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumDrivingTimeBetweenBreaks**. If no other value is specified, the value defaults to 0. The value counts towards **maximumDrivingTime** if the latter is specified.</value>
        [DataMember(Name = "accumulatedDrivingTimeSinceLastBreak", EmitDefaultValue = true)]
        public int? AccumulatedDrivingTimeSinceLastBreak { get; set; }

        /// <summary>
        /// Accumulated working time since end of last break [s], this includes driving time, service time at depot and customers, and idle time if lower than working time threshold. Values higher than **maximumWorkingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumWorkingTimeBetweenBreaks**. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the value defaults to **accumulatedDrivingTimeBetweenBreaks**. The value counts towards **maximumWorkingTime** if the latter is specified.
        /// </summary>
        /// <value>Accumulated working time since end of last break [s], this includes driving time, service time at depot and customers, and idle time if lower than working time threshold. Values higher than **maximumWorkingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumWorkingTimeBetweenBreaks**. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the value defaults to **accumulatedDrivingTimeBetweenBreaks**. The value counts towards **maximumWorkingTime** if the latter is specified.</value>
        [DataMember(Name = "accumulatedWorkingTimeSinceLastBreak", EmitDefaultValue = true)]
        public int? AccumulatedWorkingTimeSinceLastBreak { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkLogbook {\n");
            sb.Append("  LastTimeTheDriverWorked: ").Append(LastTimeTheDriverWorked).Append("\n");
            sb.Append("  AccumulatedDrivingTimeSinceLastBreak: ").Append(AccumulatedDrivingTimeSinceLastBreak).Append("\n");
            sb.Append("  AccumulatedWorkingTimeSinceLastBreak: ").Append(AccumulatedWorkingTimeSinceLastBreak).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccumulatedDrivingTimeSinceLastBreak (int?) minimum
            if (this.AccumulatedDrivingTimeSinceLastBreak < (int?)0)
            {
                yield return new ValidationResult("Invalid value for AccumulatedDrivingTimeSinceLastBreak, must be a value greater than or equal to 0.", new [] { "AccumulatedDrivingTimeSinceLastBreak" });
            }

            // AccumulatedWorkingTimeSinceLastBreak (int?) minimum
            if (this.AccumulatedWorkingTimeSinceLastBreak < (int?)0)
            {
                yield return new ValidationResult("Invalid value for AccumulatedWorkingTimeSinceLastBreak, must be a value greater than or equal to 0.", new [] { "AccumulatedWorkingTimeSinceLastBreak" });
            }

            yield break;
        }
    }

}
