/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// An input object for the service method &#39;startAndCreateOptimizedRoute&#39;.
    /// </summary>
    [DataContract(Name = "OptimizationRequest")]
    public partial class OptimizationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptimizationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationRequest" /> class.
        /// </summary>
        /// <param name="locations">The list of depot or customer locations that may be referenced by the vehicle, transports and stops. A location is a place where goods have to be picked up or delivered, or where the vehicle is located. A location is either a depot location or a customer location. Depot locations may be found at start or end of **route-stops**. Each location must be referenced by another object. If a request contains a location not referenced by any other object, the request will be rejected. (required).</param>
        /// <param name="vehicle">vehicle.</param>
        /// <param name="driver">driver (required).</param>
        /// <param name="transports">The list of transports, that is, orders to transport goods from one location to another location. Depending on your subscription, a more restrictive value for maximum number of transport may apply. Check request limits of your subscription. (required).</param>
        /// <param name="route">The route containing a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: pickups after deliveries. The sequence of pickups and deliveries is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either pickups or deliveries. A (partial) route already containing the corresponding stops at depot and/or customer locations can be input here. If stops are specified, the **Restrictions** should be set accordingly..</param>
        /// <param name="restrictions">restrictions.</param>
        public OptimizationRequest(List<Location> locations = default(List<Location>), Vehicle vehicle = default(Vehicle), Driver driver = default(Driver), List<Transport> transports = default(List<Transport>), List<Stop> route = default(List<Stop>), Restrictions restrictions = default(Restrictions))
        {
            // to ensure "locations" is required (not null)
            if (locations == null)
            {
                throw new ArgumentNullException("locations is a required property for OptimizationRequest and cannot be null");
            }
            this.Locations = locations;
            // to ensure "driver" is required (not null)
            if (driver == null)
            {
                throw new ArgumentNullException("driver is a required property for OptimizationRequest and cannot be null");
            }
            this.Driver = driver;
            // to ensure "transports" is required (not null)
            if (transports == null)
            {
                throw new ArgumentNullException("transports is a required property for OptimizationRequest and cannot be null");
            }
            this.Transports = transports;
            this.Vehicle = vehicle;
            this.Route = route;
            this.Restrictions = restrictions;
        }

        /// <summary>
        /// The list of depot or customer locations that may be referenced by the vehicle, transports and stops. A location is a place where goods have to be picked up or delivered, or where the vehicle is located. A location is either a depot location or a customer location. Depot locations may be found at start or end of **route-stops**. Each location must be referenced by another object. If a request contains a location not referenced by any other object, the request will be rejected.
        /// </summary>
        /// <value>The list of depot or customer locations that may be referenced by the vehicle, transports and stops. A location is a place where goods have to be picked up or delivered, or where the vehicle is located. A location is either a depot location or a customer location. Depot locations may be found at start or end of **route-stops**. Each location must be referenced by another object. If a request contains a location not referenced by any other object, the request will be rejected.</value>
        [DataMember(Name = "locations", IsRequired = true, EmitDefaultValue = true)]
        public List<Location> Locations { get; set; }

        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name = "vehicle", EmitDefaultValue = false)]
        public Vehicle Vehicle { get; set; }

        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        [DataMember(Name = "driver", IsRequired = true, EmitDefaultValue = true)]
        public Driver Driver { get; set; }

        /// <summary>
        /// The list of transports, that is, orders to transport goods from one location to another location. Depending on your subscription, a more restrictive value for maximum number of transport may apply. Check request limits of your subscription.
        /// </summary>
        /// <value>The list of transports, that is, orders to transport goods from one location to another location. Depending on your subscription, a more restrictive value for maximum number of transport may apply. Check request limits of your subscription.</value>
        [DataMember(Name = "transports", IsRequired = true, EmitDefaultValue = true)]
        public List<Transport> Transports { get; set; }

        /// <summary>
        /// The route containing a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: pickups after deliveries. The sequence of pickups and deliveries is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either pickups or deliveries. A (partial) route already containing the corresponding stops at depot and/or customer locations can be input here. If stops are specified, the **Restrictions** should be set accordingly.
        /// </summary>
        /// <value>The route containing a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop is at a specific location, either a customer location or a depot location. At a customer location, transports are scheduled in order of their type: pickups after deliveries. The sequence of pickups and deliveries is always sorted by Last In - First Out (LIFO). At a depot location a stop groups either pickups or deliveries. A (partial) route already containing the corresponding stops at depot and/or customer locations can be input here. If stops are specified, the **Restrictions** should be set accordingly.</value>
        [DataMember(Name = "route", EmitDefaultValue = false)]
        public List<Stop> Route { get; set; }

        /// <summary>
        /// Gets or Sets Restrictions
        /// </summary>
        [DataMember(Name = "restrictions", EmitDefaultValue = false)]
        public Restrictions Restrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizationRequest {\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  Transports: ").Append(Transports).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
