/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.sequenceoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.sequenceoptimization.Model
{
    /// <summary>
    /// A transport is the order to transport goods, that is, to pick them up at one location and deliver them to another location.  See [here](./concepts/locations-transports-and-stops) for more information.
    /// </summary>
    [DataContract(Name = "Transport")]
    public partial class Transport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transport" /> class.
        /// </summary>
        /// <param name="id">A unique ID across all transports. The ID does not influence the result. (required).</param>
        /// <param name="quantities">A list of quantity dimensions of goods that have to be transported from pickup location to delivery location. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all capacities of the vehicle. If and only if this list of quantities is empty for all transports, the capacities of the given vehicle must be empty..</param>
        /// <param name="pickupLocationId">The ID of the location where goods have to be picked up. (required).</param>
        /// <param name="pickupServiceTime">The service time [s] that is required to pick up the transport goods at the pickup location. (default to 0).</param>
        /// <param name="deliveryLocationId">The ID of the location where goods have to be delivered to. (required).</param>
        /// <param name="deliveryServiceTime">The service time [s] that is required to deliver the transport goods at the delivery location. (default to 0).</param>
        /// <param name="priority">The priority of this transport. 0 is the lowest priority, 9 the highest. This field is only considered during the optimization if considerTransportPriorities is set. In this case every transport must have a priority set otherwise an exception is thrown. If considerTransportPriorities is set to false either every or no transport may have a priority set.  See [here](./concepts/transport-priorities) for more information..</param>
        public Transport(string id = default(string), List<int?> quantities = default(List<int?>), string pickupLocationId = default(string), int? pickupServiceTime = 0, string deliveryLocationId = default(string), int? deliveryServiceTime = 0, int? priority = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Transport and cannot be null");
            }
            this.Id = id;
            // to ensure "pickupLocationId" is required (not null)
            if (pickupLocationId == null)
            {
                throw new ArgumentNullException("pickupLocationId is a required property for Transport and cannot be null");
            }
            this.PickupLocationId = pickupLocationId;
            // to ensure "deliveryLocationId" is required (not null)
            if (deliveryLocationId == null)
            {
                throw new ArgumentNullException("deliveryLocationId is a required property for Transport and cannot be null");
            }
            this.DeliveryLocationId = deliveryLocationId;
            this.Quantities = quantities;
            // use default value if no "pickupServiceTime" provided
            this.PickupServiceTime = pickupServiceTime ?? 0;
            // use default value if no "deliveryServiceTime" provided
            this.DeliveryServiceTime = deliveryServiceTime ?? 0;
            this.Priority = priority;
        }

        /// <summary>
        /// A unique ID across all transports. The ID does not influence the result.
        /// </summary>
        /// <value>A unique ID across all transports. The ID does not influence the result.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A list of quantity dimensions of goods that have to be transported from pickup location to delivery location. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all capacities of the vehicle. If and only if this list of quantities is empty for all transports, the capacities of the given vehicle must be empty.
        /// </summary>
        /// <value>A list of quantity dimensions of goods that have to be transported from pickup location to delivery location. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all capacities of the vehicle. If and only if this list of quantities is empty for all transports, the capacities of the given vehicle must be empty.</value>
        [DataMember(Name = "quantities", EmitDefaultValue = false)]
        public List<int?> Quantities { get; set; }

        /// <summary>
        /// The ID of the location where goods have to be picked up.
        /// </summary>
        /// <value>The ID of the location where goods have to be picked up.</value>
        [DataMember(Name = "pickupLocationId", IsRequired = true, EmitDefaultValue = true)]
        public string PickupLocationId { get; set; }

        /// <summary>
        /// The service time [s] that is required to pick up the transport goods at the pickup location.
        /// </summary>
        /// <value>The service time [s] that is required to pick up the transport goods at the pickup location.</value>
        [DataMember(Name = "pickupServiceTime", EmitDefaultValue = true)]
        public int? PickupServiceTime { get; set; }

        /// <summary>
        /// The ID of the location where goods have to be delivered to.
        /// </summary>
        /// <value>The ID of the location where goods have to be delivered to.</value>
        [DataMember(Name = "deliveryLocationId", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryLocationId { get; set; }

        /// <summary>
        /// The service time [s] that is required to deliver the transport goods at the delivery location.
        /// </summary>
        /// <value>The service time [s] that is required to deliver the transport goods at the delivery location.</value>
        [DataMember(Name = "deliveryServiceTime", EmitDefaultValue = true)]
        public int? DeliveryServiceTime { get; set; }

        /// <summary>
        /// The priority of this transport. 0 is the lowest priority, 9 the highest. This field is only considered during the optimization if considerTransportPriorities is set. In this case every transport must have a priority set otherwise an exception is thrown. If considerTransportPriorities is set to false either every or no transport may have a priority set.  See [here](./concepts/transport-priorities) for more information.
        /// </summary>
        /// <value>The priority of this transport. 0 is the lowest priority, 9 the highest. This field is only considered during the optimization if considerTransportPriorities is set. In this case every transport must have a priority set otherwise an exception is thrown. If considerTransportPriorities is set to false either every or no transport may have a priority set.  See [here](./concepts/transport-priorities) for more information.</value>
        [DataMember(Name = "priority", EmitDefaultValue = true)]
        public int? Priority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transport {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Quantities: ").Append(Quantities).Append("\n");
            sb.Append("  PickupLocationId: ").Append(PickupLocationId).Append("\n");
            sb.Append("  PickupServiceTime: ").Append(PickupServiceTime).Append("\n");
            sb.Append("  DeliveryLocationId: ").Append(DeliveryLocationId).Append("\n");
            sb.Append("  DeliveryServiceTime: ").Append(DeliveryServiceTime).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.PickupLocationId != null) {
                // PickupLocationId (string) pattern
                Regex regexPickupLocationId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
                if (!regexPickupLocationId.Match(this.PickupLocationId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PickupLocationId, must match a pattern of " + regexPickupLocationId, new [] { "PickupLocationId" });
                }
            }

            // PickupServiceTime (int?) minimum
            if (this.PickupServiceTime < (int?)0)
            {
                yield return new ValidationResult("Invalid value for PickupServiceTime, must be a value greater than or equal to 0.", new [] { "PickupServiceTime" });
            }

            if (this.DeliveryLocationId != null) {
                // DeliveryLocationId (string) pattern
                Regex regexDeliveryLocationId = new Regex(@".*[^ ].*", RegexOptions.CultureInvariant);
                if (!regexDeliveryLocationId.Match(this.DeliveryLocationId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeliveryLocationId, must match a pattern of " + regexDeliveryLocationId, new [] { "DeliveryLocationId" });
                }
            }

            // DeliveryServiceTime (int?) minimum
            if (this.DeliveryServiceTime < (int?)0)
            {
                yield return new ValidationResult("Invalid value for DeliveryServiceTime, must be a value greater than or equal to 0.", new [] { "DeliveryServiceTime" });
            }

            // Priority (int?) maximum
            if (this.Priority > (int?)9)
            {
                yield return new ValidationResult("Invalid value for Priority, must be a value less than or equal to 9.", new [] { "Priority" });
            }

            // Priority (int?) minimum
            if (this.Priority < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Priority, must be a value greater than or equal to 0.", new [] { "Priority" });
            }

            yield break;
        }
    }

}
