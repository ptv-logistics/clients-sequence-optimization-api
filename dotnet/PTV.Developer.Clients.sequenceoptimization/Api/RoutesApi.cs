/*
 * Sequence Optimization
 *
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.sequenceoptimization.Client;
using PTV.Developer.Clients.sequenceoptimization.Model;

namespace PTV.Developer.Clients.sequenceoptimization.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoutesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOptimizedRoute(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOptimizedRouteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptimizedRouteResponse</returns>
        OptimizedRouteResponse GetOptimizedRoute(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptimizedRouteResponse</returns>
        ApiResponse<OptimizedRouteResponse> GetOptimizedRouteWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptimizedRouteIdentifier</returns>
        OptimizedRouteIdentifier StartAndCreateOptimizedRoute(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptimizedRouteIdentifier</returns>
        ApiResponse<OptimizedRouteIdentifier> StartAndCreateOptimizedRouteWithHttpInfo(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoutesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOptimizedRouteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOptimizedRouteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptimizedRouteResponse</returns>
        System.Threading.Tasks.Task<OptimizedRouteResponse> GetOptimizedRouteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptimizedRouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptimizedRouteResponse>> GetOptimizedRouteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptimizedRouteIdentifier</returns>
        System.Threading.Tasks.Task<OptimizedRouteIdentifier> StartAndCreateOptimizedRouteAsync(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptimizedRouteIdentifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptimizedRouteIdentifier>> StartAndCreateOptimizedRouteWithHttpInfoAsync(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoutesApi : IRoutesApiSync, IRoutesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoutesApi : IRoutesApi
    {
        private PTV.Developer.Clients.sequenceoptimization.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoutesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoutesApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.sequenceoptimization.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.sequenceoptimization.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.sequenceoptimization.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.sequenceoptimization.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.sequenceoptimization.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.sequenceoptimization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoutesApi(PTV.Developer.Clients.sequenceoptimization.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.sequenceoptimization.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.sequenceoptimization.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.sequenceoptimization.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.sequenceoptimization.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.sequenceoptimization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RoutesApi(PTV.Developer.Clients.sequenceoptimization.Client.ISynchronousClient client, PTV.Developer.Clients.sequenceoptimization.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.sequenceoptimization.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.sequenceoptimization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.sequenceoptimization.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.sequenceoptimization.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.sequenceoptimization.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.sequenceoptimization.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Deletes the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOptimizedRoute(Guid id, int operationIndex = 0)
        {
            DeleteOptimizedRouteWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<Object> DeleteOptimizedRouteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RoutesApi.DeleteOptimizedRoute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/routes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOptimizedRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOptimizedRouteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteOptimizedRouteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<Object>> DeleteOptimizedRouteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RoutesApi.DeleteOptimizedRoute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/routes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOptimizedRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptimizedRouteResponse</returns>
        public OptimizedRouteResponse GetOptimizedRoute(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteResponse> localVarResponse = GetOptimizedRouteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptimizedRouteResponse</returns>
        public PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteResponse> GetOptimizedRouteWithHttpInfo(Guid id, int operationIndex = 0)
        {
            PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RoutesApi.GetOptimizedRoute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptimizedRouteResponse>("/routes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizedRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptimizedRouteResponse</returns>
        public async System.Threading.Tasks.Task<OptimizedRouteResponse> GetOptimizedRouteAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteResponse> localVarResponse = await GetOptimizedRouteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the status, and if the status is SUCCEEDED, the optimized route whose ID is specified.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique optimized route ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptimizedRouteResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteResponse>> GetOptimizedRouteWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RoutesApi.GetOptimizedRoute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OptimizedRouteResponse>("/routes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizedRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptimizedRouteIdentifier</returns>
        public OptimizedRouteIdentifier StartAndCreateOptimizedRoute(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0)
        {
            PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteIdentifier> localVarResponse = StartAndCreateOptimizedRouteWithHttpInfo(optimizationRequest, considerTransportPriorities);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptimizedRouteIdentifier</returns>
        public PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteIdentifier> StartAndCreateOptimizedRouteWithHttpInfo(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'optimizationRequest' is set
            if (optimizationRequest == null)
            {
                throw new PTV.Developer.Clients.sequenceoptimization.Client.ApiException(400, "Missing required parameter 'optimizationRequest' when calling RoutesApi->StartAndCreateOptimizedRoute");
            }

            PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (considerTransportPriorities != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.ParameterToMultiMap("", "considerTransportPriorities", considerTransportPriorities));
            }
            localVarRequestOptions.Data = optimizationRequest;

            localVarRequestOptions.Operation = "RoutesApi.StartAndCreateOptimizedRoute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OptimizedRouteIdentifier>("/routes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartAndCreateOptimizedRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptimizedRouteIdentifier</returns>
        public async System.Threading.Tasks.Task<OptimizedRouteIdentifier> StartAndCreateOptimizedRouteAsync(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteIdentifier> localVarResponse = await StartAndCreateOptimizedRouteWithHttpInfoAsync(optimizationRequest, considerTransportPriorities, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Performs desired sequence optimization. The call is asynchronous and only one optimization can be started at a time. Returns unique optimized route ID upon success. Use the unique ID returned to subsequently track the progress of the optimization and to get the optimized route. The number of transports in the request is used to calculate the number of transactions, see [here](../../help/faq-help) for more information.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.sequenceoptimization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optimizationRequest">Specific instance for sequence optimization.</param>
        /// <param name="considerTransportPriorities">Set transport priority consideration to true or false.  See [here](./concepts/transport-priorities) for more information. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptimizedRouteIdentifier)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.sequenceoptimization.Client.ApiResponse<OptimizedRouteIdentifier>> StartAndCreateOptimizedRouteWithHttpInfoAsync(OptimizationRequest optimizationRequest, bool? considerTransportPriorities = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'optimizationRequest' is set
            if (optimizationRequest == null)
            {
                throw new PTV.Developer.Clients.sequenceoptimization.Client.ApiException(400, "Missing required parameter 'optimizationRequest' when calling RoutesApi->StartAndCreateOptimizedRoute");
            }


            PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.sequenceoptimization.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (considerTransportPriorities != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.sequenceoptimization.Client.ClientUtils.ParameterToMultiMap("", "considerTransportPriorities", considerTransportPriorities));
            }
            localVarRequestOptions.Data = optimizationRequest;

            localVarRequestOptions.Operation = "RoutesApi.StartAndCreateOptimizedRoute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OptimizedRouteIdentifier>("/routes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartAndCreateOptimizedRoute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
