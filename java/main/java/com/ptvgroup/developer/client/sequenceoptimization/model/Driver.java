/*
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.sequenceoptimization.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.sequenceoptimization.model.BreakRule;
import com.ptvgroup.developer.client.sequenceoptimization.model.TimeInterval;
import com.ptvgroup.developer.client.sequenceoptimization.model.WorkLogbook;
import com.ptvgroup.developer.client.sequenceoptimization.model.WorkingHoursPreset;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.sequenceoptimization.ApiClient;
/**
 * The driver of the specified vehicle. The driver can only operate the vehicle within the given time interval.
 */
@JsonPropertyOrder({
  Driver.JSON_PROPERTY_AVAILABILITY,
  Driver.JSON_PROPERTY_WORKING_HOURS_PRESET,
  Driver.JSON_PROPERTY_BREAK_RULE,
  Driver.JSON_PROPERTY_WORK_LOGBOOK,
  Driver.JSON_PROPERTY_MAXIMUM_DRIVING_TIME,
  Driver.JSON_PROPERTY_MAXIMUM_TRAVEL_TIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:41:48.082993405Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class Driver {
  public static final String JSON_PROPERTY_AVAILABILITY = "availability";
  private TimeInterval availability;

  public static final String JSON_PROPERTY_WORKING_HOURS_PRESET = "workingHoursPreset";
  private JsonNullable<WorkingHoursPreset> workingHoursPreset = JsonNullable.<WorkingHoursPreset>undefined();

  public static final String JSON_PROPERTY_BREAK_RULE = "breakRule";
  private BreakRule breakRule;

  public static final String JSON_PROPERTY_WORK_LOGBOOK = "workLogbook";
  private WorkLogbook workLogbook;

  public static final String JSON_PROPERTY_MAXIMUM_DRIVING_TIME = "maximumDrivingTime";
  private JsonNullable<Integer> maximumDrivingTime = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAXIMUM_TRAVEL_TIME = "maximumTravelTime";
  private JsonNullable<Integer> maximumTravelTime = JsonNullable.<Integer>undefined();

  public Driver() { 
  }

  public Driver availability(TimeInterval availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Interval during which the driver is available. The route has to start and end within this interval. All opening intervals outside of this interval are not considered. The interval is restricted to a maximum duration of twenty four hours.
   * @return availability
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public TimeInterval getAvailability() {
    return availability;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvailability(TimeInterval availability) {
    this.availability = availability;
  }


  public Driver workingHoursPreset(WorkingHoursPreset workingHoursPreset) {
    this.workingHoursPreset = JsonNullable.<WorkingHoursPreset>of(workingHoursPreset);
    return this;
  }

  /**
   * Get workingHoursPreset
   * @return workingHoursPreset
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public WorkingHoursPreset getWorkingHoursPreset() {
        return workingHoursPreset.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WORKING_HOURS_PRESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<WorkingHoursPreset> getWorkingHoursPreset_JsonNullable() {
    return workingHoursPreset;
  }
  
  @JsonProperty(JSON_PROPERTY_WORKING_HOURS_PRESET)
  public void setWorkingHoursPreset_JsonNullable(JsonNullable<WorkingHoursPreset> workingHoursPreset) {
    this.workingHoursPreset = workingHoursPreset;
  }

  public void setWorkingHoursPreset(WorkingHoursPreset workingHoursPreset) {
    this.workingHoursPreset = JsonNullable.<WorkingHoursPreset>of(workingHoursPreset);
  }


  public Driver breakRule(BreakRule breakRule) {
    this.breakRule = breakRule;
    return this;
  }

  /**
   * Get breakRule
   * @return breakRule
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BREAK_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BreakRule getBreakRule() {
    return breakRule;
  }


  @JsonProperty(JSON_PROPERTY_BREAK_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBreakRule(BreakRule breakRule) {
    this.breakRule = breakRule;
  }


  public Driver workLogbook(WorkLogbook workLogbook) {
    this.workLogbook = workLogbook;
    return this;
  }

  /**
   * Get workLogbook
   * @return workLogbook
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORK_LOGBOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public WorkLogbook getWorkLogbook() {
    return workLogbook;
  }


  @JsonProperty(JSON_PROPERTY_WORK_LOGBOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkLogbook(WorkLogbook workLogbook) {
    this.workLogbook = workLogbook;
  }


  public Driver maximumDrivingTime(Integer maximumDrivingTime) {
    this.maximumDrivingTime = JsonNullable.<Integer>of(maximumDrivingTime);
    return this;
  }

  /**
   * The maximum driving time of the driver [s].   The maximum driving time is considered as infinite if it is not set.
   * minimum: 1
   * @return maximumDrivingTime
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaximumDrivingTime() {
        return maximumDrivingTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaximumDrivingTime_JsonNullable() {
    return maximumDrivingTime;
  }
  
  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_TIME)
  public void setMaximumDrivingTime_JsonNullable(JsonNullable<Integer> maximumDrivingTime) {
    this.maximumDrivingTime = maximumDrivingTime;
  }

  public void setMaximumDrivingTime(Integer maximumDrivingTime) {
    this.maximumDrivingTime = JsonNullable.<Integer>of(maximumDrivingTime);
  }


  public Driver maximumTravelTime(Integer maximumTravelTime) {
    this.maximumTravelTime = JsonNullable.<Integer>of(maximumTravelTime);
    return this;
  }

  /**
   * The maximum travel time of the driver [s]. The travel time contains all waiting, service and driving times.  The maximum travel time is considered as infinite if it is not set.
   * minimum: 1
   * @return maximumTravelTime
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaximumTravelTime() {
        return maximumTravelTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAXIMUM_TRAVEL_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaximumTravelTime_JsonNullable() {
    return maximumTravelTime;
  }
  
  @JsonProperty(JSON_PROPERTY_MAXIMUM_TRAVEL_TIME)
  public void setMaximumTravelTime_JsonNullable(JsonNullable<Integer> maximumTravelTime) {
    this.maximumTravelTime = maximumTravelTime;
  }

  public void setMaximumTravelTime(Integer maximumTravelTime) {
    this.maximumTravelTime = JsonNullable.<Integer>of(maximumTravelTime);
  }


  /**
   * Return true if this Driver object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Driver driver = (Driver) o;
    return Objects.equals(this.availability, driver.availability) &&
        equalsNullable(this.workingHoursPreset, driver.workingHoursPreset) &&
        Objects.equals(this.breakRule, driver.breakRule) &&
        Objects.equals(this.workLogbook, driver.workLogbook) &&
        equalsNullable(this.maximumDrivingTime, driver.maximumDrivingTime) &&
        equalsNullable(this.maximumTravelTime, driver.maximumTravelTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, hashCodeNullable(workingHoursPreset), breakRule, workLogbook, hashCodeNullable(maximumDrivingTime), hashCodeNullable(maximumTravelTime));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Driver {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    workingHoursPreset: ").append(toIndentedString(workingHoursPreset)).append("\n");
    sb.append("    breakRule: ").append(toIndentedString(breakRule)).append("\n");
    sb.append("    workLogbook: ").append(toIndentedString(workLogbook)).append("\n");
    sb.append("    maximumDrivingTime: ").append(toIndentedString(maximumDrivingTime)).append("\n");
    sb.append("    maximumTravelTime: ").append(toIndentedString(maximumTravelTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `availability` to the URL query string
    if (getAvailability() != null) {
      joiner.add(getAvailability().toUrlQueryString(prefix + "availability" + suffix));
    }

    // add `workingHoursPreset` to the URL query string
    if (getWorkingHoursPreset() != null) {
      joiner.add(String.format("%sworkingHoursPreset%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkingHoursPreset()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `breakRule` to the URL query string
    if (getBreakRule() != null) {
      joiner.add(getBreakRule().toUrlQueryString(prefix + "breakRule" + suffix));
    }

    // add `workLogbook` to the URL query string
    if (getWorkLogbook() != null) {
      joiner.add(getWorkLogbook().toUrlQueryString(prefix + "workLogbook" + suffix));
    }

    // add `maximumDrivingTime` to the URL query string
    if (getMaximumDrivingTime() != null) {
      joiner.add(String.format("%smaximumDrivingTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMaximumDrivingTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `maximumTravelTime` to the URL query string
    if (getMaximumTravelTime() != null) {
      joiner.add(String.format("%smaximumTravelTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMaximumTravelTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

