/*
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.sequenceoptimization.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.sequenceoptimization.model.ViolationType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.sequenceoptimization.ApiClient;
/**
 * Specifies a violation of a route.
 */
@JsonPropertyOrder({
  Violation.JSON_PROPERTY_TYPE,
  Violation.JSON_PROPERTY_TIME_EXCEEDANCE,
  Violation.JSON_PROPERTY_DISTANCE_EXCEEDANCE,
  Violation.JSON_PROPERTY_CAPACITY_EXCEEDANCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:41:48.082993405Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class Violation {
  public static final String JSON_PROPERTY_TYPE = "type";
  private ViolationType type;

  public static final String JSON_PROPERTY_TIME_EXCEEDANCE = "timeExceedance";
  private Integer timeExceedance;

  public static final String JSON_PROPERTY_DISTANCE_EXCEEDANCE = "distanceExceedance";
  private Integer distanceExceedance;

  public static final String JSON_PROPERTY_CAPACITY_EXCEEDANCE = "capacityExceedance";
  private List<Integer> capacityExceedance;

  public Violation() { 
  }

  public Violation type(ViolationType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ViolationType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(ViolationType type) {
    this.type = type;
  }


  public Violation timeExceedance(Integer timeExceedance) {
    this.timeExceedance = timeExceedance;
    return this;
  }

  /**
   * Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _ROUTE_START_INTERVAL_, DRIVER_AVAILABILITY, OPENING_INTERVAL, MAXIMUM_TRAVEL_TIME_OF_DRIVER and MAXIMUM_DRIVING_TIME_OF_DRIVER.
   * @return timeExceedance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_EXCEEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTimeExceedance() {
    return timeExceedance;
  }


  @JsonProperty(JSON_PROPERTY_TIME_EXCEEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeExceedance(Integer timeExceedance) {
    this.timeExceedance = timeExceedance;
  }


  public Violation distanceExceedance(Integer distanceExceedance) {
    this.distanceExceedance = distanceExceedance;
    return this;
  }

  /**
   * Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_.
   * @return distanceExceedance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTANCE_EXCEEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getDistanceExceedance() {
    return distanceExceedance;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCE_EXCEEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistanceExceedance(Integer distanceExceedance) {
    this.distanceExceedance = distanceExceedance;
  }


  public Violation capacityExceedance(List<Integer> capacityExceedance) {
    this.capacityExceedance = capacityExceedance;
    return this;
  }

  public Violation addCapacityExceedanceItem(Integer capacityExceedanceItem) {
    if (this.capacityExceedance == null) {
      this.capacityExceedance = new ArrayList<>();
    }
    this.capacityExceedance.add(capacityExceedanceItem);
    return this;
  }

  /**
   * Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation types: VEHICLE_CAPACITY.
   * @return capacityExceedance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAPACITY_EXCEEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Integer> getCapacityExceedance() {
    return capacityExceedance;
  }


  @JsonProperty(JSON_PROPERTY_CAPACITY_EXCEEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapacityExceedance(List<Integer> capacityExceedance) {
    this.capacityExceedance = capacityExceedance;
  }


  /**
   * Return true if this Violation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Violation violation = (Violation) o;
    return Objects.equals(this.type, violation.type) &&
        Objects.equals(this.timeExceedance, violation.timeExceedance) &&
        Objects.equals(this.distanceExceedance, violation.distanceExceedance) &&
        Objects.equals(this.capacityExceedance, violation.capacityExceedance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, timeExceedance, distanceExceedance, capacityExceedance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Violation {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timeExceedance: ").append(toIndentedString(timeExceedance)).append("\n");
    sb.append("    distanceExceedance: ").append(toIndentedString(distanceExceedance)).append("\n");
    sb.append("    capacityExceedance: ").append(toIndentedString(capacityExceedance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timeExceedance` to the URL query string
    if (getTimeExceedance() != null) {
      joiner.add(String.format("%stimeExceedance%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTimeExceedance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `distanceExceedance` to the URL query string
    if (getDistanceExceedance() != null) {
      joiner.add(String.format("%sdistanceExceedance%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDistanceExceedance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `capacityExceedance` to the URL query string
    if (getCapacityExceedance() != null) {
      for (int i = 0; i < getCapacityExceedance().size(); i++) {
        joiner.add(String.format("%scapacityExceedance%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCapacityExceedance().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

