/*
 * Sequence Optimization
 * With the Sequence Optimization service you can find the best route for your transports.
 *
 * The version of the OpenAPI document: 1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.sequenceoptimization.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.sequenceoptimization.ApiClient;
/**
 * Attributes for a location of type DEPOT.
 */
@JsonPropertyOrder({
  DepotLocationAttributes.JSON_PROPERTY_SERVICE_TIME_PER_PICKUP_STOP,
  DepotLocationAttributes.JSON_PROPERTY_SERVICE_TIME_PER_DELIVERY_STOP
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:41:48.082993405Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class DepotLocationAttributes {
  public static final String JSON_PROPERTY_SERVICE_TIME_PER_PICKUP_STOP = "serviceTimePerPickupStop";
  private Integer serviceTimePerPickupStop = 0;

  public static final String JSON_PROPERTY_SERVICE_TIME_PER_DELIVERY_STOP = "serviceTimePerDeliveryStop";
  private Integer serviceTimePerDeliveryStop = 0;

  public DepotLocationAttributes() { 
  }

  public DepotLocationAttributes serviceTimePerPickupStop(Integer serviceTimePerPickupStop) {
    this.serviceTimePerPickupStop = serviceTimePerPickupStop;
    return this;
  }

  /**
   * The service time [s] that is required each time this location is visited in order to pick up goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports.
   * minimum: 0
   * @return serviceTimePerPickupStop
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_TIME_PER_PICKUP_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getServiceTimePerPickupStop() {
    return serviceTimePerPickupStop;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_TIME_PER_PICKUP_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceTimePerPickupStop(Integer serviceTimePerPickupStop) {
    this.serviceTimePerPickupStop = serviceTimePerPickupStop;
  }


  public DepotLocationAttributes serviceTimePerDeliveryStop(Integer serviceTimePerDeliveryStop) {
    this.serviceTimePerDeliveryStop = serviceTimePerDeliveryStop;
    return this;
  }

  /**
   * The service time [s] that is required each time this location is visited in order to deliver goods. The location-dependent service time represents, for example, the time to enter the premises or to register at a depot. Besides a location-dependent service time, the user may specify an additional transport-dependent service time at the transports.
   * minimum: 0
   * @return serviceTimePerDeliveryStop
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_TIME_PER_DELIVERY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getServiceTimePerDeliveryStop() {
    return serviceTimePerDeliveryStop;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_TIME_PER_DELIVERY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceTimePerDeliveryStop(Integer serviceTimePerDeliveryStop) {
    this.serviceTimePerDeliveryStop = serviceTimePerDeliveryStop;
  }


  /**
   * Return true if this DepotLocationAttributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepotLocationAttributes depotLocationAttributes = (DepotLocationAttributes) o;
    return Objects.equals(this.serviceTimePerPickupStop, depotLocationAttributes.serviceTimePerPickupStop) &&
        Objects.equals(this.serviceTimePerDeliveryStop, depotLocationAttributes.serviceTimePerDeliveryStop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceTimePerPickupStop, serviceTimePerDeliveryStop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepotLocationAttributes {\n");
    sb.append("    serviceTimePerPickupStop: ").append(toIndentedString(serviceTimePerPickupStop)).append("\n");
    sb.append("    serviceTimePerDeliveryStop: ").append(toIndentedString(serviceTimePerDeliveryStop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `serviceTimePerPickupStop` to the URL query string
    if (getServiceTimePerPickupStop() != null) {
      joiner.add(String.format("%sserviceTimePerPickupStop%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getServiceTimePerPickupStop()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `serviceTimePerDeliveryStop` to the URL query string
    if (getServiceTimePerDeliveryStop() != null) {
      joiner.add(String.format("%sserviceTimePerDeliveryStop%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getServiceTimePerDeliveryStop()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

